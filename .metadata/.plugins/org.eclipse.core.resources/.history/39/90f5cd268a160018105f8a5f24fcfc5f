package aiku.provision.cfs.manager;

import oracle.communications.inventory.extensibility.extension.util.ExtensionPointContext;
import oracle.communications.inventory.xmlbeans.BusinessInteractionItemType;

import java.util.Iterator;
import java.util.List;

import oracle.communications.inventory.api.entity.ServiceConfigurationItem;
import oracle.communications.inventory.api.entity.ServiceConfigurationVersion;
import oracle.communications.inventory.api.exception.ValidationException;
import oracle.communications.inventory.api.framework.logging.Log;
import oracle.communications.inventory.api.framework.logging.LogFactory;

public class AikuCfsManager {
	protected Log log = LogFactory.getLog(AikuCfsManager.class);
	private ExtensionPointContext context = null;
	
	private static enum BI_ACTIONS{
		CREATE("CREATE"), CHANGE("CHANGE");
		BI_ACTIONS(String input){};
	}
	
	public AikuCfsManager(ExtensionPointContext context, Log log){
		this.log = log;
		this.context = context;
	}
	public void processCfsServiceConfiguration(ServiceConfigurationVersion scv) throws ValidationException {
		log.debug("", "processCfsServiceConfiguration");
		 List<ServiceConfigurationItem> configItems = scv.getConfigItems();
		 BusinessInteractionItemType item = (BusinessInteractionItemType) context.getArguments()[1];
		 String serviceAction = null;;
		if(item != null)
				serviceAction = item.getService().getAction().toUpperCase();
		 switch(BI_ACTIONS.valueOf(serviceAction)){
			case CREATE:
				createCFS(scv);
			case CHANGE:
				changeRFS(scv);
			default:
				throw new ValidationException("Invalid BI Action");
		 }
		
	}
	
		 private Object changeRFS(ServiceConfigurationVersion scv) {
			 log.debug("", "changeRFS");
				return null;
			}
			private Object createCFS(ServiceConfigurationVersion scv) {
				log.debug("", "createRFS");
				return null;
			}


}
	